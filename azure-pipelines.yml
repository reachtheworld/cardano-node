# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

resources:
  repositories:
  - repository: cardano-node-src
    type: github
    endpoint: raycrawfordGitHubServiceConnection
    name: reachtheworld/cardano-node
    ref: refs/tags/1.29.0

steps:
- checkout: cardano-node-src
  path: cardano-node

- task: UniversalPackages@0
  displayName: 'Download libsodium artifact'
  inputs:
    command: download
    downloadDirectory: '$(Build.SourcesDirectory)'
    vstsFeed: 'cardano-stake/libsodium'
    vstsFeedPackage: 'libsodium'
    vstsPackageVersion: '*'

- script: |
    sudo tar xvf $(Build.SourcesDirectory)/libsodium.tar -C /
    sudo chmod 644 /usr/local/lib/libsodium*
    sudo chmod 644 /usr/local/lib/pkgconfig/libsodium*
  displayName: 'Install libsodium'

- script: |
    export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
    export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
    ghcup install ghc 8.10.4
    ghcup set ghc 8.10.4
    ghcup --version
    ghc --version
    cabal --version
    sudo apt-get update -y
    sudo apt-get install automake build-essential pkg-config libffi-dev libgmp-dev libssl-dev libtinfo-dev libsystemd-dev zlib1g-dev make g++ tmux git jq wget libncursesw5 libtool autoconf -y
  displayName: 'Install build dependencies'

- script: |
    export LD_LIBRARY_PATH="/usr/local/lib:$LD_LIBRARY_PATH"
    export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
    cd $(Build.SourcesDirectory)/cardano-node
    cabal configure --with-compiler=ghc-8.10.4
    echo "package cardano-crypto-praos" >>  cabal.project.local
    echo "  flags: -external-libsodium-vrf" >>  cabal.project.local
    cabal build all
    mkdir -p $(Build.ArtifactStagingDirectory)/.local/bin
    cp -p "$(./scripts/bin-path.sh cardano-node)" $(Build.ArtifactStagingDirectory)/.local/bin/
    cp -p "$(./scripts/bin-path.sh cardano-cli)" $(Build.ArtifactStagingDirectory)/.local/bin/
    ls -alF $(Build.ArtifactStagingDirectory)/.local/bin/
